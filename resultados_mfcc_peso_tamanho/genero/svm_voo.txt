# Tuning hyper-parameters for accuracy

Best parameters set found on development set:

{'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}

Grid scores on development set:

0.269 (+/-0.073) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.269 (+/-0.073) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.269 (+/-0.073) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.269 (+/-0.073) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.269 (+/-0.073) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.269 (+/-0.073) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.269 (+/-0.073) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.269 (+/-0.073) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.269 (+/-0.073) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.542 (+/-0.299) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.269 (+/-0.073) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.269 (+/-0.073) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.676 (+/-0.328) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.504 (+/-0.334) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.269 (+/-0.073) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.269 (+/-0.073) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.269 (+/-0.073) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.269 (+/-0.073) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.269 (+/-0.073) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.269 (+/-0.073) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.269 (+/-0.073) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.269 (+/-0.073) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.269 (+/-0.073) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.269 (+/-0.073) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.269 (+/-0.073) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.269 (+/-0.073) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.269 (+/-0.073) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.424 (+/-0.189) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.269 (+/-0.073) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.269 (+/-0.073) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.269 (+/-0.073) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.269 (+/-0.073) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.269 (+/-0.073) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.269 (+/-0.073) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.269 (+/-0.073) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.269 (+/-0.073) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.269 (+/-0.073) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.269 (+/-0.073) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.269 (+/-0.073) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.427 (+/-0.354) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.269 (+/-0.073) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.269 (+/-0.073) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.556 (+/-0.233) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.484 (+/-0.367) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.269 (+/-0.073) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.269 (+/-0.073) for {'C': 0.001, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.615 (+/-0.175) for {'C': 0.1, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.484 (+/-0.367) for {'C': 0.01, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.636 (+/-0.201) for {'C': 1, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.636 (+/-0.201) for {'C': 10, 'decision_function_shape': 'ovo', 'kernel': 'linear'}

Detailed classification report:

The model is trained on the full development set.
The scores are computed on the full evaluation set.

Acur√°cia...: 67.9245
Precision..: 68.1090
Recall.....: 63.3929
F1-Score...: 63.8712

                      precision    recall  f1-score   support

       Augchloropsis       0.75      0.38      0.50         8
              Bombus       0.83      1.00      0.91        10
             Centris       1.00      0.57      0.73         7
             Eulaema       1.00      1.00      1.00         1
          Exomalopis       0.42      0.62      0.50         8
            Melipona       0.62      0.67      0.64        12
Pseudoalglochloropsi       0.00      0.00      0.00         1
            Xylocopa       0.83      0.83      0.83         6

            accuracy                           0.68        53
           macro avg       0.68      0.63      0.64        53
        weighted avg       0.72      0.68      0.68        53


# Tuning hyper-parameters for precision_macro

Best parameters set found on development set:

{'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}

Grid scores on development set:

0.044 (+/-0.019) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.044 (+/-0.019) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.044 (+/-0.019) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.044 (+/-0.019) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.044 (+/-0.019) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.044 (+/-0.019) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.044 (+/-0.019) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.044 (+/-0.019) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.044 (+/-0.019) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.393 (+/-0.354) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.044 (+/-0.019) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.044 (+/-0.019) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.583 (+/-0.322) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.369 (+/-0.342) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.044 (+/-0.019) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.044 (+/-0.019) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.044 (+/-0.019) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.044 (+/-0.019) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.044 (+/-0.019) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.044 (+/-0.019) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.044 (+/-0.019) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.044 (+/-0.019) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.044 (+/-0.019) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.044 (+/-0.019) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.044 (+/-0.019) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.044 (+/-0.019) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.044 (+/-0.019) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.305 (+/-0.213) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.044 (+/-0.019) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.044 (+/-0.019) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.044 (+/-0.019) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.044 (+/-0.019) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.044 (+/-0.019) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.044 (+/-0.019) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.044 (+/-0.019) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.044 (+/-0.019) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.044 (+/-0.019) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.044 (+/-0.019) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.044 (+/-0.019) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.285 (+/-0.334) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.044 (+/-0.019) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.044 (+/-0.019) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.427 (+/-0.232) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.360 (+/-0.377) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.044 (+/-0.019) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.044 (+/-0.019) for {'C': 0.001, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.457 (+/-0.125) for {'C': 0.1, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.360 (+/-0.377) for {'C': 0.01, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.452 (+/-0.183) for {'C': 1, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.452 (+/-0.183) for {'C': 10, 'decision_function_shape': 'ovo', 'kernel': 'linear'}

Detailed classification report:

The model is trained on the full development set.
The scores are computed on the full evaluation set.

Acur√°cia...: 67.9245
Precision..: 68.1090
Recall.....: 63.3929
F1-Score...: 63.8712

                      precision    recall  f1-score   support

       Augchloropsis       0.75      0.38      0.50         8
              Bombus       0.83      1.00      0.91        10
             Centris       1.00      0.57      0.73         7
             Eulaema       1.00      1.00      1.00         1
          Exomalopis       0.42      0.62      0.50         8
            Melipona       0.62      0.67      0.64        12
Pseudoalglochloropsi       0.00      0.00      0.00         1
            Xylocopa       0.83      0.83      0.83         6

            accuracy                           0.68        53
           macro avg       0.68      0.63      0.64        53
        weighted avg       0.72      0.68      0.68        53


# Tuning hyper-parameters for recall_macro

Best parameters set found on development set:

{'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}

Grid scores on development set:

0.164 (+/-0.042) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.164 (+/-0.042) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.164 (+/-0.042) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.164 (+/-0.042) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.164 (+/-0.042) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.164 (+/-0.042) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.164 (+/-0.042) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.164 (+/-0.042) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.164 (+/-0.042) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.477 (+/-0.250) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.164 (+/-0.042) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.164 (+/-0.042) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.643 (+/-0.163) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.451 (+/-0.254) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.164 (+/-0.042) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.164 (+/-0.042) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.164 (+/-0.042) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.164 (+/-0.042) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.164 (+/-0.042) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.164 (+/-0.042) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.164 (+/-0.042) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.164 (+/-0.042) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.164 (+/-0.042) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.164 (+/-0.042) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.164 (+/-0.042) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.164 (+/-0.042) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.164 (+/-0.042) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.348 (+/-0.162) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.164 (+/-0.042) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.164 (+/-0.042) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.164 (+/-0.042) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.164 (+/-0.042) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.164 (+/-0.042) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.164 (+/-0.042) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.164 (+/-0.042) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.164 (+/-0.042) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.164 (+/-0.042) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.164 (+/-0.042) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.164 (+/-0.042) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.375 (+/-0.295) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.164 (+/-0.042) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.164 (+/-0.042) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.513 (+/-0.133) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.432 (+/-0.315) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.164 (+/-0.042) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.164 (+/-0.042) for {'C': 0.001, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.536 (+/-0.112) for {'C': 0.1, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.432 (+/-0.315) for {'C': 0.01, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.575 (+/-0.120) for {'C': 1, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.575 (+/-0.120) for {'C': 10, 'decision_function_shape': 'ovo', 'kernel': 'linear'}

Detailed classification report:

The model is trained on the full development set.
The scores are computed on the full evaluation set.

Acur√°cia...: 67.9245
Precision..: 68.1090
Recall.....: 63.3929
F1-Score...: 63.8712

                      precision    recall  f1-score   support

       Augchloropsis       0.75      0.38      0.50         8
              Bombus       0.83      1.00      0.91        10
             Centris       1.00      0.57      0.73         7
             Eulaema       1.00      1.00      1.00         1
          Exomalopis       0.42      0.62      0.50         8
            Melipona       0.62      0.67      0.64        12
Pseudoalglochloropsi       0.00      0.00      0.00         1
            Xylocopa       0.83      0.83      0.83         6

            accuracy                           0.68        53
           macro avg       0.68      0.63      0.64        53
        weighted avg       0.72      0.68      0.68        53


# Tuning hyper-parameters for f1_macro

Best parameters set found on development set:

{'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}

Grid scores on development set:

0.070 (+/-0.027) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.070 (+/-0.027) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.070 (+/-0.027) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.070 (+/-0.027) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.070 (+/-0.027) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.070 (+/-0.027) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.070 (+/-0.027) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.070 (+/-0.027) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.070 (+/-0.027) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.391 (+/-0.297) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.070 (+/-0.027) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.070 (+/-0.027) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.578 (+/-0.234) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.365 (+/-0.276) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.070 (+/-0.027) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.070 (+/-0.027) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.070 (+/-0.027) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.070 (+/-0.027) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.070 (+/-0.027) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.070 (+/-0.027) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.070 (+/-0.027) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.070 (+/-0.027) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.070 (+/-0.027) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.070 (+/-0.027) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.070 (+/-0.027) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.070 (+/-0.027) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.070 (+/-0.027) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.275 (+/-0.159) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'poly'}
0.070 (+/-0.027) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'poly'}
0.070 (+/-0.027) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'poly'}
0.070 (+/-0.027) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.070 (+/-0.027) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.070 (+/-0.027) for {'C': 0.001, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.070 (+/-0.027) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.070 (+/-0.027) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.070 (+/-0.027) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.070 (+/-0.027) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.070 (+/-0.027) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.070 (+/-0.027) for {'C': 0.01, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.297 (+/-0.311) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.070 (+/-0.027) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.070 (+/-0.027) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.438 (+/-0.172) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'sigmoid'}
0.361 (+/-0.334) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'sigmoid'}
0.070 (+/-0.027) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'sigmoid'}
0.070 (+/-0.027) for {'C': 0.001, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.467 (+/-0.121) for {'C': 0.1, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.361 (+/-0.334) for {'C': 0.01, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.485 (+/-0.129) for {'C': 1, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.485 (+/-0.129) for {'C': 10, 'decision_function_shape': 'ovo', 'kernel': 'linear'}

Detailed classification report:

The model is trained on the full development set.
The scores are computed on the full evaluation set.

Acur√°cia...: 67.9245
Precision..: 68.1090
Recall.....: 63.3929
F1-Score...: 63.8712

                      precision    recall  f1-score   support

       Augchloropsis       0.75      0.38      0.50         8
              Bombus       0.83      1.00      0.91        10
             Centris       1.00      0.57      0.73         7
             Eulaema       1.00      1.00      1.00         1
          Exomalopis       0.42      0.62      0.50         8
            Melipona       0.62      0.67      0.64        12
Pseudoalglochloropsi       0.00      0.00      0.00         1
            Xylocopa       0.83      0.83      0.83         6

            accuracy                           0.68        53
           macro avg       0.68      0.63      0.64        53
        weighted avg       0.72      0.68      0.68        53


